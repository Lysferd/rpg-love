--[[=============================================================================== ** SceneBattle v1.0 **  By Lysferd (C) 2015    Creates and manages the top level of the battle system.    BATTLE SCENE    + Battlers      + Allies' Sprites      + Enemies' Sprites    + Boxes      + Battle Box        + Facades        + Status        + Wait Bar        + Balance Bar    + Actions      + Command Menu        + Ally Command Selection      + Enemy AI===============================================================================--]]require( 'lua.battler' )require( 'lua.troop' )require( 'lua.battle_box' )require( 'lua.command_menu' )--require( 'lua.help_box' )----------------------------------------------------------------------- * Declare SceneBattle.---------------------------------------------------------------------SceneBattle = { }SceneBattle.__index = SceneBattlefunction SceneBattle.new()  local obj = setmetatable( { }, SceneBattle )    -------------------------------------------------------------------  -- SCENE MANAGEMENT VARIABLE --------------------------------------  obj.name = 'battle'    -------------------------------------------------------------------  -- GENERATE BATTLE BACKGROUND -------------------------------------  -- FIXME: An appropriate battle background should have 70% of its  -- height of "field", and the rest the "sky". This is not the case  -- so the characters don't quite fit. Also, no need to use two  -- images really (damn you RPG Maker RTP).  local b = love.math.random( 11 )  obj.background_upper = love.graphics.newImage( 'graphics/backgrounds/upper' .. b .. '.png' )  obj.background_lower = love.graphics.newImage( 'graphics/backgrounds/lower' .. b .. '.png' )    -------------------------------------------------------------------  -- LOAD BATTLE BGM ------------------------------------------------  -- FIXME: There should be at least a couple of battle songs, or  -- even be related to the current map. Anyway this is actually  -- functional but because of a bug in the SceneManager, once the  -- BGM starts playing it never stops (actually I didn't program the  -- logic to stop it).  obj.bgm = love.audio.newSource( 'audio/bgm/battle' .. love.math.random( 9 ) .. '.ogg' )  love.audio.play( obj.bgm )    -------------------------------------------------------------------  -- BATTLE MANAGEMENT VARIABLES ------------------------------------  obj.state          = 'start'  obj.ally_index     = 1  obj.allies_actions = { }    -- fixme: enemy position depends on sprite size  obj.battler_positions = {    enemies = { { 120, 228 }, { 312, 288 }, {  72, 384 }, { 252, 444 }, { 192, 336 } },    allies  = { { 516, 456 }, { 588, 384 }, { 648, 300 }, { 720, 228 } }  }    -------------------------------------------------------------------  -- BATTLE BOX INITIALIZATION --------------------------------------  obj.battle_box = BattleBox.new()    -------------------------------------------------------------------  -- COMMAND MENU INITIALIZATION ------------------------------------  obj.command_menu = CommandMenu.new( obj.battle_box.contents_x, obj.battle_box.contents_y )    -------------------------------------------------------------------  -- BATTLER OBJECTS ------------------------------------------------  local e = love.math.random( 4 )  obj.enemies = { }  obj.allies  = { }    for index = 1, 5 do    obj.enemies[index] = Battler.new( troop.members[love.math.random( 4 )].battler_path, obj.battler_positions.enemies[index] )   end    for index = 1, #party.members do    obj.allies[index] = Battler.new( party.members[index].battler_path, obj.battler_positions.allies[index] )  end    return objend----------------------------------------------------------------------- * Frame update---------------------------------------------------------------------function SceneBattle:update()  for _,enemy in pairs( self.enemies ) do enemy:update() end  for _,ally  in pairs( self.allies )  do ally:update()  end    if self.state == 'start' then    self.command_menu:open()    self.state = 'wait'  elseif self.state == 'wait' and self.command_menu:opened() then    -- actually waiting  elseif self.state == 'next' and self.command_menu:closed() then    if self.ally_index == party.max_members then      self.ally_index = 1      self.state = 'start'    else      self.ally_index = self.ally_index + 1      self.state = 'start'    end  end    self.battle_box:update()  self.command_menu:update()end----------------------------------------------------------------------- * Frame draw---------------------------------------------------------------------function SceneBattle:draw()  -------------------------------------------------------------------  -- DRAW BATTLE BACKGROUND -----------------------------------------  love.graphics.draw( self.background_lower, 0, 0, 0, WINDOW_WIDTH / self.background_lower:getWidth(), WINDOW_HEIGHT / self.background_lower:getHeight() )  love.graphics.draw( self.background_upper, 0, 0, 0, WINDOW_WIDTH / self.background_upper:getWidth(), WINDOW_HEIGHT / self.background_upper:getHeight() )    -------------------------------------------------------------------  -- DRAW BATTLERS --------------------------------------------------  for _,enemy in pairs( self.enemies ) do enemy:draw() end  for _,ally  in pairs( self.allies )  do ally:draw()  end    -------------------------------------------------------------------  -- DRAW BOXES -----------------------------------------------------  self.battle_box:draw()  self.command_menu:draw()    --debug: draw horizon line  -- local original_color = { love.graphics.getColor() }  -- love.graphics.setColor( Color.green )  -- love.graphics.line( 0, 168, WINDOW_WIDTH, 168 )  -- love.graphics.setColor( original_color )  --debugend----------------------------------------------------------------------- * Keyboard callback---------------------------------------------------------------------function SceneBattle:keypressed( key, isrepeat )  self.battle_box:keypressed( key, isrepeat )  self.command_menu:keypressed( key, isrepeat )    if key == Input.decision then    self.allies_actions[self.ally_index] = self.command_menu.chosen    self.state = 'next'  endendfunction SceneBattle:mousepressed()end