--[[=============================================================================== ** SceneBattle v1.0 **  By Lysferd (C) 2014===============================================================================--]]require( 'lua.enemy' )require( 'lua.ally' )require( 'lua.commandmenu' )----------------------------------------------------------------------- * Declare SceneBattle.---------------------------------------------------------------------SceneBattle = { }SceneBattle.__index = SceneBattlefunction SceneBattle.new()  local obj = setmetatable( { }, SceneBattle )    obj.name = 'battle'  obj.background_upper = love.graphics.newImage( 'graphics/grassland_upper.png' )  obj.background_lower = love.graphics.newImage( 'graphics/grassland_lower.png' )  obj.bgm = love.audio.newSource( 'audio/bgm/Battle1.ogg' )    obj.state = 'start'  obj.ally_index = 1  obj.allies_actions = { }    -- fixme: enemy position depends on sprite size  obj.positions = {    enemy1 = { 150, 185 }, enemy2 = { 425, 220 }, enemy3 = { 70, 350 }, enemy4 = { 305, 340 },    ally1  = { 630, 390 }, ally2  = { 300, 500 }  }    obj.enemies = { Enemy.new( obj.positions.enemy1[1], obj.positions.enemy1[2] ) }    obj.allies  = {    Ally.new( obj.positions.ally1[1], obj.positions.ally1[2] ),    Ally.new( obj.positions.ally2[1], obj.positions.ally2[2] )  }  obj.menu    = CommandMenu.new()  love.audio.play( obj.bgm )    return objend----------------------------------------------------------------------- * Frame update---------------------------------------------------------------------function SceneBattle:update()  for _,enemy in pairs( self.enemies ) do    enemy:update()  end    for _,ally in pairs( self.allies ) do    ally:update()  end    if self.state == 'start' then    self.menu:open( self.allies[self.ally_index]:coordinates() )    self.state = 'wait'  elseif self.state == 'wait' and self.menu:opened() then    -- actually waiting  elseif self.state == 'next' and self.menu:closed() then    if self.ally_index == 2 then  -- fixme: set this limiter to the actual maximum party size      self.ally_index = 1      self.state = 'start'    else      self.ally_index = self.ally_index + 1      self.state = 'start'    end  end    self.menu:update()end----------------------------------------------------------------------- * Frame draw---------------------------------------------------------------------function SceneBattle:draw()  love.graphics.draw( self.background_lower, 0, 0, 0, WINDOW_WIDTH / self.background_lower:getWidth(), WINDOW_HEIGHT / self.background_lower:getHeight() )  love.graphics.draw( self.background_upper, 0, 0, 0, WINDOW_WIDTH / self.background_upper:getWidth(), WINDOW_HEIGHT / self.background_upper:getHeight() )    --debug  local original_color = { love.graphics.getColor() }  love.graphics.setColor( Color.green )  love.graphics.line( WINDOW_WIDTH, WINDOW_HEIGHT / 3, 0, WINDOW_HEIGHT )  love.graphics.setColor( original_color )  --debug    for _,enemy in pairs( self.enemies ) do    enemy:draw()  end    for _,ally in pairs( self.allies ) do    ally:draw()  end    self.menu:draw()end----------------------------------------------------------------------- * Keyboard callback---------------------------------------------------------------------function SceneBattle:keypressed( key, isrepeat )  self.menu:keypressed( key, isrepeat )    if key == 'return' then    self.allies_actions[self.ally_index] = self.menu.chosen    self.state = 'next'    self.menu:close()  endend----------------------------------------------------------------------- * Mouse callback---------------------------------------------------------------------function SceneBattle:mousepressed( x, y, key )  -- for _,enemy in pairs( self.enemies ) do    -- enemy:mousepressed( x, y, key )  -- end    -- for _,ally in pairs( self.allies ) do    -- ally:mousepressed( x, y, key )  -- endend