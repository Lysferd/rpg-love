--[[=============================================================================== ** BattleBox v0.1 **  By Lysferd (C) 2015===============================================================================--]]require( 'lua.box' )require( 'lua.battle.meter' )----------------------------------------------------------------------- * Declare BattleBox.---------------------------------------------------------------------BattleBox = { }BattleBox.__index = BattleBoxfunction BattleBox.new()  local obj = { }  setmetatable( obj, BattleBox )    -------------------------------------------------------------------  -- INITIALIZE BOX -------------------------------------------------  local w, h     = WINDOW_WIDTH, 96 + 16  local x, y     = WINDOW_WIDTH / 2, WINDOW_HEIGHT - h / 2  obj.box        = Box.new( 'graphics/box_skin.png', x, y, w, h )  obj.font       = FONT  obj.contents_x = x - w / 2 + 8  obj.contents_y = y - h / 2 + 8  obj.box:open_box()    -------------------------------------------------------------------  -- INITIALIZE FACADES ---------------------------------------------  obj.facades = { }  obj.facade_index = 1  for index, member in pairs( party.members ) do    obj.facades[index] = love.graphics.newImage( member.facade_path )  end    -------------------------------------------------------------------  -- GENERATE FACADES -----------------------------------------------  x = obj.contents_x  y = obj.contents_y  obj.hp_bar = Meter.new( x, y, Color.red )  obj.mp_bar = Meter.new( x, y, Color.blue )    return objend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function BattleBox:update()  selected_ally = party.members[self.facade_index]    self.box:update()  self.hp_bar:update( selected_ally.hp / selected_ally.max_hp )  self.mp_bar:update( selected_ally.mp / selected_ally.max_mp )end----------------------------------------------------------------------- * Frame draw.---------------------------------------------------------------------function BattleBox:draw()  self.box:draw()  if not self.box.open then return end    -- draw facade rectangle  local x = self.contents_x + 114  local y = self.contents_y  local original_color = { love.graphics.getColor() }  love.graphics.setColor( Color.white )  for i = 1, #party.members do    if i == self.facade_index then      love.graphics.setShader()    else      love.graphics.setShader( GRAYSCALE )    end    love.graphics.rectangle( 'line', x + (i - 1) * 26, y, 26, 96 )    love.graphics.draw( self.facades[i], x + (i - 1) * 26, y )    x = x + 8  end  love.graphics.setColor( original_color )  love.graphics.setShader()    -- draw status  x = x + 26 * #party.members  love.graphics.print( selected_ally.name, x, y )  y = y + FONT:getHeight() + 4    self.hp_bar.x = x + FONT:getWidth( 'HP:' ) + 2  self.hp_bar.y = y + 2  self.hp_bar:draw()  love.graphics.print( 'HP:', x, y ) --  .. selected_ally.hp .. '/' .. selected_ally.max_hp  y = y + FONT:getHeight() + 4    self.mp_bar.x = x + FONT:getWidth( 'MP:' ) + 2  self.mp_bar.y = y + 2  self.mp_bar:draw()  love.graphics.print( 'MP:', x, y )  y = y + FONT:getHeight() + 4    love.graphics.print( 'Status: ' .. selected_ally.status, x, y )end----------------------------------------------------------------------- * Keyboard callback---------------------------------------------------------------------function BattleBox:keypressed( key, isrepeat )    -------------------------------------------------------------------  -- FACADE SELECTION -----------------------------------------------  if key == Input.left then    self.facade_index = self.facade_index - 1        if self.facade_index < 1 then      self.facade_index = #party.members    end    Audio.se.cursor:play()  elseif key == Input.right then    self.facade_index = self.facade_index + 1        if self.facade_index > #party.members then      self.facade_index = 1    end    Audio.se.cursor:play()  endend