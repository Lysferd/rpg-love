--[[=============================================================================== ** CommandCommandMenu v1.0 **  By Lysferd (C) 2014===============================================================================--]]require( 'lua.box' )----------------------------------------------------------------------- * Declare CommandMenu.---------------------------------------------------------------------CommandMenu = { }CommandMenu.__index = CommandMenufunction CommandMenu.new( x, y )  local obj = { }  setmetatable( obj, CommandMenu )    local options = { 'Attack!', 'Guard!', 'Use Techniques!', 'Cast Magic!', 'Use Items!', 'Run Away!' }  local w, h = 32, #options * FONT:getHeight() + 16  for _, opt in pairs( options ) do    opt_w = FONT:getWidth( opt ) + 16    if w < opt_w then w = opt_w end  end  local x, y = x + w / 2, y + h / 2    obj.choices       = options  obj.chosen        = nil  obj.box           = Box.new( 'graphics/box_skin.png', x, y, w, h )  obj.font          = FONT  obj.contents_x    = x - w / 2 + 8  obj.contents_y    = y - h / 2 + 8  obj.w = w    obj.cursor_index = 1    return objend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:update()  self.box:update()end----------------------------------------------------------------------- * Frame draw.---------------------------------------------------------------------function CommandMenu:draw()  self.box:draw()    if not self.box.open then return end    for i, choice in pairs( self.choices ) do    love.graphics.printf( choice, self.contents_x, self.contents_y + FONT:getHeight() * (i - 1), self.w - 16, 'center' )  end    local original_color = { love.graphics.getColor() }  love.graphics.setColor( 255, 255, 255, 100 )  love.graphics.rectangle( 'fill', self.contents_x - 2, self.contents_y + self.font:getHeight() * (self.cursor_index-1), self.w - 12, self.font:getHeight() )  love.graphics.setColor( original_color )end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:closed()  return self.box.closedend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:opened()  return self.box.openend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:open()  self.box:open_box()end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:close()  self.cursor_index = 0  self.box:close_box()end----------------------------------------------------------------------- * Keyboard callback---------------------------------------------------------------------function CommandMenu:keypressed( key, isrepeat )  -- if self:closed() then return end    -------------------------------------------------------------------  -- ACTION SELECTION -----------------------------------------------  if key == Input.up then    self.cursor_index = self.cursor_index - 1        if self.cursor_index < 1 then      self.cursor_index = #self.choices    end    Audio.se.cursor:play()  elseif key == Input.down then    self.cursor_index = self.cursor_index + 1        if self.cursor_index > #self.choices then      self.cursor_index = 1    end    Audio.se.cursor:play()  end    if key == Input.decision then    self.chosen = self.choices[self.cursor_index]    self.command_menu:close()    Audio.se.decision:play()  endend