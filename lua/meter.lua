--[[=============================================================================== ** Meter v1.0 **  By Lysferd (C) 2014  Summary:  Creates a animated meter for HP/MP stats.  Features:  - ... ToDos:  - ...===============================================================================--]]----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------Meter = { }Meter.__index = MeterBLACK = { 0, 0, 0 }function Meter.new( x, y, color )  local obj = setmetatable( { }, Meter )    obj.x = x  obj.y = y  obj.w = 100  obj.h = 6    obj.fill_ratio = 1.0 -- start up 100% filled meter    obj.color    = color  obj.canvas   = love.graphics.newCanvas()  Meter.refresh(obj)    return objend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function Meter:update( new_fill_ratio )  -- if not ( self.fill_ratio == new_fill_ratio ) then    -- self.fill_ratio = new_fill_ratio  -- end  if self.fill_ratio > new_fill_ratio then    self.fill_ratio = self.fill_ratio - 0.01  elseif self.fill_ratio < new_fill_ratio then    self.fill_ratio = self.fill_ratio + 0.01  endend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function Meter:draw()  local original_color = { love.graphics.getColor() }    love.graphics.setBlendMode('premultiplied')  love.graphics.draw( self.canvas )  love.graphics.setBlendMode('alpha')    love.graphics.setColor( self.color )  love.graphics.rectangle( 'fill', self.x - self.w / 2 + 1, self.y + 1, self.w * self.fill_ratio - 2, self.h - 1 )  love.graphics.setColor( original_color )end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function Meter:refresh()  local original_color = { love.graphics.getColor() }  love.graphics.setCanvas( self.canvas )  self.canvas:clear()  love.graphics.setBlendMode('alpha')    -- draw background  love.graphics.setColor( 0, 0, 0, 128 )  love.graphics.rectangle( 'fill', self.x - self.w / 2, self.y, self.w + 0, self.h + 0 )    -- draw outline  love.graphics.setColor( 0, 0, 0, 255 )  love.graphics.rectangle( 'line', self.x - self.w / 2, self.y, self.w + 0, self.h + 0 )    love.graphics.setCanvas()  love.graphics.setColor( original_color )end