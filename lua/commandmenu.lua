--[[=============================================================================== ** CommandCommandMenu v1.0 **  By Lysferd (C) 2014===============================================================================--]]require( 'lua.box' )----------------------------------------------------------------------- * Declare CommandMenu.---------------------------------------------------------------------CommandMenu = { }CommandMenu.__index = CommandMenufunction CommandMenu.new()  local obj = { }  setmetatable( obj, CommandMenu )    local options = { 'Attack', 'Guard', 'Skills', 'Use Item', 'Flee' }  local w, h = 32, #options * FONT:getHeight() + 16  local x, y = 0, 0  for _, opt in pairs( options ) do    opt_w = FONT:getWidth( opt ) + 16    if w < opt_w then w = opt_w end  end    obj.choices       = options  obj.chosen        = nil  obj.box           = Box.new( 'graphics/box_skin.png', x, y, w, h )  obj.cursor_se     = love.audio.newSource( 'audio/se/cursor.ogg', 'static' )  obj.decision_se   = love.audio.newSource( 'audio/se/decision.ogg', static )  obj.font          = FONT  obj.contents_x    = x - w / 2 + 8  obj.contents_y    = y - h / 2 + 8  obj.w = w    obj.cursor_index = 0    return objend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:update()  self.box:update()end----------------------------------------------------------------------- * Frame draw.---------------------------------------------------------------------function CommandMenu:draw()  self.box:draw()    if not self.box.open then return end    for i, choice in pairs( self.choices ) do    love.graphics.printf( choice, self.contents_x, self.contents_y + FONT:getHeight() * (i - 1), self.w-16, 'center' )  end    local original_color = { love.graphics.getColor() }  love.graphics.setColor( 255, 255, 255, 100 )  love.graphics.rectangle( 'fill', self.contents_x, self.contents_y + self.font:getHeight() * self.cursor_index, self.w-16, self.font:getHeight() )  love.graphics.setColor( original_color )end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:closed()  return self.box.closedend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:opened()  return self.box.openend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:open( x, y )  x = x + 32 + self.box.std_w / 2 + 1  self.box.std_x = x  self.box.std_y = y  self.contents_x = x - self.box.std_w / 2 + 8  self.contents_y = y - self.box.std_h / 2 + 8  self.box:open_box()end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:close()  self.box:close_box()end----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function CommandMenu:keypressed( key, isrepeat )  if key == 'w' and self.cursor_index > 0 then    self.cursor_index = self.cursor_index - 1    self.cursor_se:play()  elseif key == 's' and self.cursor_index < #self.choices - 1 then    self.cursor_index = self.cursor_index + 1    self.cursor_se:play()  end    if key == 'return' then    self.chosen = self.choices[self.cursor_index + 1]    self.cursor_index = 0    self.decision_se:play()  endend