--[[=============================================================================== ** Menu v1.0 **  By Lysferd (C) 2014  Summary:  The standard message box.  Features:  - Automatically resizes to the supplied choices. ToDos:  - Everything else.===============================================================================--]]require( 'lua.box' )----------------------------------------------------------------------- * Declare Menu.---------------------------------------------------------------------Menu = { }Menu.__index = Menufunction Menu.new()  local obj = { }  setmetatable( obj, Menu )    local options = { 'Status', 'Weapons', 'Configure', 'Quit' }  local w, h = 32, #options * FONT:getHeight() + 16  local x, y = 0, 0  for _, opt in pairs( options ) do    opt_w = FONT:getWidth( opt ) + 16    if w < opt_w then w = opt_w end  end    obj.choices       = options  obj.box           = Box.new( 'graphics/box_skin.png', x, y, w, h )  obj.font          = FONT  obj.contents_x    = x - w / 2 + 8  obj.contents_y    = y - h / 2 + 8    return objend----------------------------------------------------------------------- * Frame update.---------------------------------------------------------------------function Menu:update()  self.box:update()end----------------------------------------------------------------------- * Frame draw.---------------------------------------------------------------------function Menu:draw()  self.box:draw()    if not self.box.open then return end    for i, choice in pairs( self.choices ) do    love.graphics.print( choice, self.contents_x, self.contents_y + FONT:getHeight() * (i - 1) )  end  endfunction Menu:closed()  return self.box.closedendfunction Menu:opened()  return self.box.openendfunction Menu:open( x, y )  x = x + 32 + self.box.std_w / 2 + 1  self.box.std_x = x  self.box.std_y = y  self.contents_x = x - self.box.std_w / 2 + 8  self.contents_y = y - self.box.std_h / 2 + 8  self.box:open_box()endfunction Menu:close()  self.box:close_box()end