---- Developing a game framework with LÖVE--require( 'lua.color' )require( 'lua.graphics' )require( 'lua.scenemanager' )function love.load()  -------------------------------------------------------------------  -- CONSTANTS  WINDOW_WIDTH  = love.graphics:getWidth()  WINDOW_HEIGHT = love.graphics:getHeight()  FONT          = love.graphics.newFont( 'fonts/msgothic.ttc', 10 )  show_dev = true    -------------------------------------------------------------------  -- DEFAULTS  love.graphics.setBackgroundColor( 20, 20, 60 )  love.graphics.setFont( FONT )    dev_canvas = love.graphics.newCanvas()  love.graphics.setCanvas( dev_canvas )  local intel = 'Show/hide development intel with F1.\n' ..                'Quit with ESC or Q.\n' ..                'Scene selection: (0)free scene (1)title scene (2)battle scene'  love.graphics.print_outline( intel, 5, WINDOW_HEIGHT - FONT:getHeight() * 3 - 4 )  love.graphics.setCanvas()    -------------------------------------------------------------------  -- OBJECT INITIALIZATION  scene_manager = SceneManager.new()end----------------------------------------------------------------------- Frame update.---------------------------------------------------------------------function love.update( dt )  scene_manager:update()    -------------------------------------------------------------------  -- PANIC EXIT -----------------------------------------------------  if love.keyboard.isDown( 'escape', 'q' ) then     love.event.quit()  endend----------------------------------------------------------------------- Frame draw.---------------------------------------------------------------------function love.draw()  scene_manager:draw()    if not show_dev then return end    -------------------------------------------------------------------  -- DRAW DEV INTEL -------------------------------------------------  local original_color = { love.graphics.getColor() }  love.graphics.setColor( Color.green )    local x, y = love.mouse.getPosition()  love.graphics.print_outline( 'Mouse cursor position: ' .. x .. 'x' .. y, 5, 5 )    if scene_manager.scene and scene_manager.scene.name == 'free' then    local cx, cy, cz = scene_manager.scene.player:coordinates()    love.graphics.print_outline( 'Character Position: (' .. cx .. ', ' .. cy .. ', ' .. cz .. ')', 5, FONT:getHeight() + 8 )  end    local fps = 'FPS: ' .. love.timer.getFPS()  love.graphics.print_outline( fps, WINDOW_WIDTH - string.len( fps ) * 5 - 5, 5 )    -- local dt  = 'Δt: ' .. love.timer.getDelta()  -- love.graphics.print_outline( dt, WINDOW_WIDTH - string.len( dt ) * 5 - 5, FONT:getHeight() + 8 )    love.graphics.setBlendMode('premultiplied')  love.graphics.draw( dev_canvas )  love.graphics.setBlendMode('alpha')    love.graphics.setColor( original_color )end----------------------------------------------------------------------- Keyboard callback---------------------------------------------------------------------function love.keypressed( key, isrepeat )  scene_manager:keypressed( key, isrepeat )    if key == '0' then    scene_manager:change_to( 'free' )  elseif key == '1' then    scene_manager:change_to( 'title' )  elseif key == '2' then    scene_manager:change_to( 'battle' )  end    if key == 'f1' then    show_dev = not show_dev  endend----------------------------------------------------------------------- * Mouse callback---------------------------------------------------------------------function love.mousepressed( ... )  scene_manager:mousepressed( ... )end----------------------------------------------------------------------- * Assert that the mouse is within a certain clickable region.---------------------------------------------------------------------function within_area( mx, my, ax, ay, aw, ah )  return mx >= ax - aw / 2 and         mx <= ax + aw / 2 and         my >= ay - ah / 2 and         my <= ay + ah / 2end